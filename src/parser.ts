/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* // A recursive type declaration of a JSON value.
* type value = boolean | null | string | number | value[] | {[key: string]: value}
* ---
* JSON_text := OBJECT | ARRAY
* VALUE := OBJECT | ARRAY | NUMBER | STRING
*          | s='true|false' .value = boolean { return s==='true';}
*          | s='null' .value = null { return null; }
* OBJECT := BEGIN_OBJECT body={h=MEMBER t={VALUE_SEPARATOR v=MEMBER}*}? END_OBJECT
*     .value = {[index: string]: value} {
*         return this.body === null ?  {}
*         : Object.fromEntries([[this.body.h.s.value, this.body.h.v.value]].concat(
*             this.body.t.map(m => [m.v.s.value, m.v.v.value])));
*      }
* BEGIN_OBJECT := _ '{' _
* END_OBJECT := _ '}' _
* VALUE_SEPARATOR := _ ',' _
* MEMBER := s=STRING NAME_SEPARATOR v=VALUE
* NAME_SEPARATOR := _ ':' _
* ARRAY := BEGIN_ARRAY body={h=VALUE t={VALUE_SEPARATOR v=VALUE}*}? END_ARRAY
*     .value = value[] {
*         return this.body === null ? [] : [this.body.h.value].concat(this.body.t.map(x=>x.v.value));
*      }
* BEGIN_ARRAY := _ '\[' _
* END_ARRAY := _ ']' _
* NUMBER := m='-'? i=INT f=FRAC? e=EXP?
*      // We cheat slightly and use Javascripts parseFloat to handle converting the number string
*      // to a float.
*     .value = number { return parseFloat((this.m??'') + this.i + (this.f??'') + (this.e??'')); }
* INT := '0|[1-9][0-9]*'
* FRAC := '\.[0-9]+'
* EXP := '[eE][+-]?[0-9]+'
* STRING := '"' s=CHARS '"'
*        // We need to interpret any escaped characters which we do with this function.
*        .value = string {
*            let out = "";
*            const esc = {
*                '"': '"', '\\': '\\', '/': '/', 'b': '\b',
*                'f': '\f', 'n': '\n', 'r': '\r', 't': '\t',
*            } as {[key: string]: string};
*            for (let i = 0; i < s.length; ++i) {
*                if (s[i] !== "\\") {
*                    out += s[i];
*                    continue;
*                }
*                out += esc[s[i+1]];
*                ++i;
*            }
*            return out;
*        }
* CHARS := '([^"\\\u0000-\u001F]|\\["\\/bfnrt])*'u
* // Whitespace
* _ := '\s*'
*/

// A recursive type declaration of a JSON value.
type value = boolean | null | string | number | value[] | {[key: string]: value}

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    JSON_text_1 = "JSON_text_1",
    JSON_text_2 = "JSON_text_2",
    VALUE_1 = "VALUE_1",
    VALUE_2 = "VALUE_2",
    VALUE_3 = "VALUE_3",
    VALUE_4 = "VALUE_4",
    VALUE_5 = "VALUE_5",
    VALUE_6 = "VALUE_6",
    OBJECT = "OBJECT",
    OBJECT_$0 = "OBJECT_$0",
    OBJECT_$0_$0 = "OBJECT_$0_$0",
    BEGIN_OBJECT = "BEGIN_OBJECT",
    END_OBJECT = "END_OBJECT",
    VALUE_SEPARATOR = "VALUE_SEPARATOR",
    MEMBER = "MEMBER",
    NAME_SEPARATOR = "NAME_SEPARATOR",
    ARRAY = "ARRAY",
    ARRAY_$0 = "ARRAY_$0",
    ARRAY_$0_$0 = "ARRAY_$0_$0",
    BEGIN_ARRAY = "BEGIN_ARRAY",
    END_ARRAY = "END_ARRAY",
    NUMBER = "NUMBER",
    INT = "INT",
    FRAC = "FRAC",
    EXP = "EXP",
    STRING = "STRING",
    CHARS = "CHARS",
    _ = "_",
}
export type JSON_text = JSON_text_1 | JSON_text_2;
export type JSON_text_1 = OBJECT;
export type JSON_text_2 = ARRAY;
export type VALUE = VALUE_1 | VALUE_2 | VALUE_3 | VALUE_4 | VALUE_5 | VALUE_6;
export type VALUE_1 = OBJECT;
export type VALUE_2 = ARRAY;
export type VALUE_3 = NUMBER;
export type VALUE_4 = STRING;
export class VALUE_5 {
    public kind: ASTKinds.VALUE_5 = ASTKinds.VALUE_5;
    public s: string;
    public value: boolean;
    constructor(s: string){
        this.s = s;
        this.value = ((): boolean => {
        return s==='true';
        })();
    }
}
export class VALUE_6 {
    public kind: ASTKinds.VALUE_6 = ASTKinds.VALUE_6;
    public s: string;
    public value: null;
    constructor(s: string){
        this.s = s;
        this.value = ((): null => {
        return null;
        })();
    }
}
export class OBJECT {
    public kind: ASTKinds.OBJECT = ASTKinds.OBJECT;
    public body: Nullable<OBJECT_$0>;
    public value: {[index: string]: value};
    constructor(body: Nullable<OBJECT_$0>){
        this.body = body;
        this.value = ((): {[index: string]: value} => {
        return this.body === null ?  {}
        : Object.fromEntries([[this.body.h.s.value, this.body.h.v.value]].concat(
            this.body.t.map(m => [m.v.s.value, m.v.v.value])));
        })();
    }
}
export interface OBJECT_$0 {
    kind: ASTKinds.OBJECT_$0;
    h: MEMBER;
    t: OBJECT_$0_$0[];
}
export interface OBJECT_$0_$0 {
    kind: ASTKinds.OBJECT_$0_$0;
    v: MEMBER;
}
export interface BEGIN_OBJECT {
    kind: ASTKinds.BEGIN_OBJECT;
}
export interface END_OBJECT {
    kind: ASTKinds.END_OBJECT;
}
export interface VALUE_SEPARATOR {
    kind: ASTKinds.VALUE_SEPARATOR;
}
export interface MEMBER {
    kind: ASTKinds.MEMBER;
    s: STRING;
    v: VALUE;
}
export interface NAME_SEPARATOR {
    kind: ASTKinds.NAME_SEPARATOR;
}
export class ARRAY {
    public kind: ASTKinds.ARRAY = ASTKinds.ARRAY;
    public body: Nullable<ARRAY_$0>;
    public value: value[];
    constructor(body: Nullable<ARRAY_$0>){
        this.body = body;
        this.value = ((): value[] => {
        return this.body === null ? [] : [this.body.h.value].concat(this.body.t.map(x=>x.v.value));
        })();
    }
}
export interface ARRAY_$0 {
    kind: ASTKinds.ARRAY_$0;
    h: VALUE;
    t: ARRAY_$0_$0[];
}
export interface ARRAY_$0_$0 {
    kind: ASTKinds.ARRAY_$0_$0;
    v: VALUE;
}
export interface BEGIN_ARRAY {
    kind: ASTKinds.BEGIN_ARRAY;
}
export interface END_ARRAY {
    kind: ASTKinds.END_ARRAY;
}
export class NUMBER {
    public kind: ASTKinds.NUMBER = ASTKinds.NUMBER;
    public m: Nullable<string>;
    public i: INT;
    public f: Nullable<FRAC>;
    public e: Nullable<EXP>;
    public value: number;
    constructor(m: Nullable<string>, i: INT, f: Nullable<FRAC>, e: Nullable<EXP>){
        this.m = m;
        this.i = i;
        this.f = f;
        this.e = e;
        this.value = ((): number => {
        return parseFloat((this.m??'') + this.i + (this.f??'') + (this.e??''));
        })();
    }
}
export type INT = string;
export type FRAC = string;
export type EXP = string;
export class STRING {
    public kind: ASTKinds.STRING = ASTKinds.STRING;
    public s: CHARS;
    public value: string;
    constructor(s: CHARS){
        this.s = s;
        this.value = ((): string => {
        let out = "";
           const esc = {
               '"': '"', '\\': '\\', '/': '/', 'b': '\b',
               'f': '\f', 'n': '\n', 'r': '\r', 't': '\t',
           } as {[key: string]: string};
           for (let i = 0; i < s.length; ++i) {
               if (s[i] !== "\\") {
                   out += s[i];
                   continue;
               }
               out += esc[s[i+1]];
               ++i;
           }
           return out;
        })();
    }
}
export type CHARS = string;
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchJSON_text($$dpth: number, $$cr?: ErrorTracker): Nullable<JSON_text> {
        return this.choice<JSON_text>([
            () => this.matchJSON_text_1($$dpth + 1, $$cr),
            () => this.matchJSON_text_2($$dpth + 1, $$cr),
        ]);
    }
    public matchJSON_text_1($$dpth: number, $$cr?: ErrorTracker): Nullable<JSON_text_1> {
        return this.matchOBJECT($$dpth + 1, $$cr);
    }
    public matchJSON_text_2($$dpth: number, $$cr?: ErrorTracker): Nullable<JSON_text_2> {
        return this.matchARRAY($$dpth + 1, $$cr);
    }
    public matchVALUE($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE> {
        return this.choice<VALUE>([
            () => this.matchVALUE_1($$dpth + 1, $$cr),
            () => this.matchVALUE_2($$dpth + 1, $$cr),
            () => this.matchVALUE_3($$dpth + 1, $$cr),
            () => this.matchVALUE_4($$dpth + 1, $$cr),
            () => this.matchVALUE_5($$dpth + 1, $$cr),
            () => this.matchVALUE_6($$dpth + 1, $$cr),
        ]);
    }
    public matchVALUE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_1> {
        return this.matchOBJECT($$dpth + 1, $$cr);
    }
    public matchVALUE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_2> {
        return this.matchARRAY($$dpth + 1, $$cr);
    }
    public matchVALUE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_3> {
        return this.matchNUMBER($$dpth + 1, $$cr);
    }
    public matchVALUE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_4> {
        return this.matchSTRING($$dpth + 1, $$cr);
    }
    public matchVALUE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_5> {
        return this.run<VALUE_5>($$dpth,
            () => {
                let $scope$s: Nullable<string>;
                let $$res: Nullable<VALUE_5> = null;
                if (true
                    && ($scope$s = this.regexAccept(String.raw`(?:true|false)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new VALUE_5($scope$s);
                }
                return $$res;
            });
    }
    public matchVALUE_6($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_6> {
        return this.run<VALUE_6>($$dpth,
            () => {
                let $scope$s: Nullable<string>;
                let $$res: Nullable<VALUE_6> = null;
                if (true
                    && ($scope$s = this.regexAccept(String.raw`(?:null)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new VALUE_6($scope$s);
                }
                return $$res;
            });
    }
    public matchOBJECT($$dpth: number, $$cr?: ErrorTracker): Nullable<OBJECT> {
        return this.run<OBJECT>($$dpth,
            () => {
                let $scope$body: Nullable<Nullable<OBJECT_$0>>;
                let $$res: Nullable<OBJECT> = null;
                if (true
                    && this.matchBEGIN_OBJECT($$dpth + 1, $$cr) !== null
                    && (($scope$body = this.matchOBJECT_$0($$dpth + 1, $$cr)) || true)
                    && this.matchEND_OBJECT($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new OBJECT($scope$body);
                }
                return $$res;
            });
    }
    public matchOBJECT_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<OBJECT_$0> {
        return this.run<OBJECT_$0>($$dpth,
            () => {
                let $scope$h: Nullable<MEMBER>;
                let $scope$t: Nullable<OBJECT_$0_$0[]>;
                let $$res: Nullable<OBJECT_$0> = null;
                if (true
                    && ($scope$h = this.matchMEMBER($$dpth + 1, $$cr)) !== null
                    && ($scope$t = this.loop<OBJECT_$0_$0>(() => this.matchOBJECT_$0_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = {kind: ASTKinds.OBJECT_$0, h: $scope$h, t: $scope$t};
                }
                return $$res;
            });
    }
    public matchOBJECT_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<OBJECT_$0_$0> {
        return this.run<OBJECT_$0_$0>($$dpth,
            () => {
                let $scope$v: Nullable<MEMBER>;
                let $$res: Nullable<OBJECT_$0_$0> = null;
                if (true
                    && this.matchVALUE_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchMEMBER($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.OBJECT_$0_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchBEGIN_OBJECT($$dpth: number, $$cr?: ErrorTracker): Nullable<BEGIN_OBJECT> {
        return this.run<BEGIN_OBJECT>($$dpth,
            () => {
                let $$res: Nullable<BEGIN_OBJECT> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BEGIN_OBJECT, };
                }
                return $$res;
            });
    }
    public matchEND_OBJECT($$dpth: number, $$cr?: ErrorTracker): Nullable<END_OBJECT> {
        return this.run<END_OBJECT>($$dpth,
            () => {
                let $$res: Nullable<END_OBJECT> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.END_OBJECT, };
                }
                return $$res;
            });
    }
    public matchVALUE_SEPARATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<VALUE_SEPARATOR> {
        return this.run<VALUE_SEPARATOR>($$dpth,
            () => {
                let $$res: Nullable<VALUE_SEPARATOR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.VALUE_SEPARATOR, };
                }
                return $$res;
            });
    }
    public matchMEMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<MEMBER> {
        return this.run<MEMBER>($$dpth,
            () => {
                let $scope$s: Nullable<STRING>;
                let $scope$v: Nullable<VALUE>;
                let $$res: Nullable<MEMBER> = null;
                if (true
                    && ($scope$s = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.matchNAME_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchVALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MEMBER, s: $scope$s, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchNAME_SEPARATOR($$dpth: number, $$cr?: ErrorTracker): Nullable<NAME_SEPARATOR> {
        return this.run<NAME_SEPARATOR>($$dpth,
            () => {
                let $$res: Nullable<NAME_SEPARATOR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.NAME_SEPARATOR, };
                }
                return $$res;
            });
    }
    public matchARRAY($$dpth: number, $$cr?: ErrorTracker): Nullable<ARRAY> {
        return this.run<ARRAY>($$dpth,
            () => {
                let $scope$body: Nullable<Nullable<ARRAY_$0>>;
                let $$res: Nullable<ARRAY> = null;
                if (true
                    && this.matchBEGIN_ARRAY($$dpth + 1, $$cr) !== null
                    && (($scope$body = this.matchARRAY_$0($$dpth + 1, $$cr)) || true)
                    && this.matchEND_ARRAY($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new ARRAY($scope$body);
                }
                return $$res;
            });
    }
    public matchARRAY_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ARRAY_$0> {
        return this.run<ARRAY_$0>($$dpth,
            () => {
                let $scope$h: Nullable<VALUE>;
                let $scope$t: Nullable<ARRAY_$0_$0[]>;
                let $$res: Nullable<ARRAY_$0> = null;
                if (true
                    && ($scope$h = this.matchVALUE($$dpth + 1, $$cr)) !== null
                    && ($scope$t = this.loop<ARRAY_$0_$0>(() => this.matchARRAY_$0_$0($$dpth + 1, $$cr), 0, -1)) !== null
                ) {
                    $$res = {kind: ASTKinds.ARRAY_$0, h: $scope$h, t: $scope$t};
                }
                return $$res;
            });
    }
    public matchARRAY_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ARRAY_$0_$0> {
        return this.run<ARRAY_$0_$0>($$dpth,
            () => {
                let $scope$v: Nullable<VALUE>;
                let $$res: Nullable<ARRAY_$0_$0> = null;
                if (true
                    && this.matchVALUE_SEPARATOR($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchVALUE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ARRAY_$0_$0, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchBEGIN_ARRAY($$dpth: number, $$cr?: ErrorTracker): Nullable<BEGIN_ARRAY> {
        return this.run<BEGIN_ARRAY>($$dpth,
            () => {
                let $$res: Nullable<BEGIN_ARRAY> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BEGIN_ARRAY, };
                }
                return $$res;
            });
    }
    public matchEND_ARRAY($$dpth: number, $$cr?: ErrorTracker): Nullable<END_ARRAY> {
        return this.run<END_ARRAY>($$dpth,
            () => {
                let $$res: Nullable<END_ARRAY> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:])`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.END_ARRAY, };
                }
                return $$res;
            });
    }
    public matchNUMBER($$dpth: number, $$cr?: ErrorTracker): Nullable<NUMBER> {
        return this.run<NUMBER>($$dpth,
            () => {
                let $scope$m: Nullable<Nullable<string>>;
                let $scope$i: Nullable<INT>;
                let $scope$f: Nullable<Nullable<FRAC>>;
                let $scope$e: Nullable<Nullable<EXP>>;
                let $$res: Nullable<NUMBER> = null;
                if (true
                    && (($scope$m = this.regexAccept(String.raw`(?:-)`, "", $$dpth + 1, $$cr)) || true)
                    && ($scope$i = this.matchINT($$dpth + 1, $$cr)) !== null
                    && (($scope$f = this.matchFRAC($$dpth + 1, $$cr)) || true)
                    && (($scope$e = this.matchEXP($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new NUMBER($scope$m, $scope$i, $scope$f, $scope$e);
                }
                return $$res;
            });
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.regexAccept(String.raw`(?:0|[1-9][0-9]*)`, "", $$dpth + 1, $$cr);
    }
    public matchFRAC($$dpth: number, $$cr?: ErrorTracker): Nullable<FRAC> {
        return this.regexAccept(String.raw`(?:\.[0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public matchEXP($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP> {
        return this.regexAccept(String.raw`(?:[eE][+-]?[0-9]+)`, "", $$dpth + 1, $$cr);
    }
    public matchSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<STRING> {
        return this.run<STRING>($$dpth,
            () => {
                let $scope$s: Nullable<CHARS>;
                let $$res: Nullable<STRING> = null;
                if (true
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                    && ($scope$s = this.matchCHARS($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new STRING($scope$s);
                }
                return $$res;
            });
    }
    public matchCHARS($$dpth: number, $$cr?: ErrorTracker): Nullable<CHARS> {
        return this.regexAccept(String.raw`(?:([^"\\\u0000-\u001F]|\\["\\/bfnrt])*)`, "u", $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchJSON_text(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchJSON_text(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchJSON_text(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<JSON_text>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}